{
  "scopeName": "source.mihama",
  "fileTypes": [
    "ma"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#generics"
    },
    {
      "include": "#import_export"
    },
    {
      "include": "#type_declaration"
    },
    {
      "include": "#let_declaration"
    },
    {
      "include": "#lambda_expression"
    },
    {
      "include": "#function_call"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ma",
          "match": "//.*$"
        },
        {
          "name": "comment.block.ma",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ma",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ma",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.ma",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.ma",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.ma",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.ma",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ma",
          "match": "\\b(import|from|as|type|export|abstract|let|match|if|then|else|in)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.lambda.ma",
          "match": "=>|->"
        },
        {
          "name": "keyword.operator.math.ma",
          "match": "\\+|-|\\*|\\/|%|\\^"
        },
        {
          "name": "keyword.operator.comparison.ma",
          "match": "==|!=|>=|<=|>|<"
        },
        {
          "name": "keyword.operator.logical.ma",
          "match": "&&|\\|\\|"
        },
        {
          "name": "keyword.operator.assignment.ma",
          "match": "="
        },
        {
          "name": "punctuation.separator.colon.ma",
          "match": ":"
        },
        {
          "name": "punctuation.separator.pipe.ma",
          "match": "\\|"
        }
      ]
    },
    "generics": {
      "patterns": [
        {
          "name": "meta.generic.ma",
          "begin": "<",
          "end": ">",
          "patterns": [
            {
              "name": "entity.name.type.parameter.ma",
              "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
            },
            {
              "name": "punctuation.separator.generic.ma",
              "match": ","
            },
            {
              "name": "keyword.operator.generic.constraint.ma",
              "match": ":"
            }
          ]
        }
      ]
    },
    "import_export": {
      "patterns": [
        {
          "name": "meta.import.ma",
          "begin": "\\bimport\\b",
          "end": "(?=$)",
          "patterns": [
            {
              "name": "keyword.control.import.ma",
              "match": "\\bimport\\b"
            },
            {
              "name": "punctuation.definition.import.brace.ma",
              "match": "[{}]"
            },
            {
              "name": "variable.parameter.import.ma",
              "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
            },
            {
              "name": "keyword.control.from.ma",
              "match": "\\bfrom\\b"
            },
            {
              "name": "string.quoted.double.ma",
              "match": "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\""
            }
          ]
        },
        {
          "name": "meta.import-as.ma",
          "begin": "\\bimport\\s+as\\b",
          "end": "(?=$)",
          "patterns": [
            {
              "name": "variable.other.module.ma",
              "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
            },
            {
              "name": "keyword.control.from.ma",
              "match": "\\bfrom\\b"
            },
            {
              "name": "string.quoted.double.ma",
              "match": "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\""
            }
          ]
        }
      ]
    },
    "type_declaration": {
      "patterns": [
        {
          "name": "meta.type.declaration.ma",
          "begin": "(?x)\n              \\b(?:export\\s+abstract\\s+type|export\\s+type|type)\\s+\n              ([A-Z][a-zA-Z0-9_]*)\\b",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.definition.ma"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "name": "keyword.operator.assignment.ma",
              "match": "="
            },
            {
              "name": "meta.type.variants.ma",
              "begin": "(?<=\\=)",
              "end": "(?=$)",
              "patterns": [
                {
                  "name": "meta.type.variant.ma",
                  "match": "(\\|\\s*)?\\b[A-Z][a-zA-Z0-9_]*\\b(?:\\s*\\((?:[^()]+|\\([^()]*\\))*\\))?"
                }
              ]
            }
          ]
        }
      ]
    },
    "let_declaration": {
      "patterns": [
        {
          "name": "meta.let.declaration.ma",
          "begin": "(?x)\n              \\blet\\s+\n              ([a-zA-Z_][a-zA-Z0-9_]*)\\b           # 捕获变量/函数名\n              (?:\\s*:\\s*(?:(<[^>]+>)\\s*)?            # 可选泛型\n              [^=]+)?                                  # 可选类型注解\n              \\s*=\\s*",
          "beginCaptures": {
            "1": {
              "name": "variable.other.definition.ma"
            },
            "2": {
              "name": "meta.generic.declaration.ma"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "include": "#lambda_expression"
            },
            {
              "include": "#function_call"
            },
            {
              "include": "#identifiers"
            }
          ]
        }
      ]
    },
    "lambda_expression": {
      "patterns": [
        {
          "name": "meta.lambda.ma",
          "begin": "(?x)\n              (\\([^()]*\\)|[a-zA-Z_][a-zA-Z0-9_]*)\\s*\n              (?:=>|->)\\s*",
          "beginCaptures": {
            "1": {
              "name": "variable.parameter.ma"
            },
            "0": {
              "name": "keyword.operator.lambda.ma"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "include": "#identifiers"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#strings"
            }
          ]
        }
      ]
    },
    "function_call": {
      "patterns": [
        {
          "name": "meta.function.call.ma",
          "match": "(?x)\n            \\b(?!let\\b|if\\b|match\\b)([a-zA-Z_][a-zA-Z0-9_]*)\\b\\s*\n            (?:<\\s*[A-Z][a-zA-Z0-9_]*(?:\\s*,\\s*[A-Z][a-zA-Z0-9_]*)*\\s*>)?\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.call.ma"
            }
          }
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.ma",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}