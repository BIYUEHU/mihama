import { Show, Eq } from "prelude"
import as std from "stdlib"

type Nat = Z | S(Nat)
type Pair = <A, B> MkPair(A, B)
type Maybe = <A> Just(A) | Nothing
type Result = <A, E> Ok(A) | Err(E)
export abstract type Option = <A> Some(A) | None
export type List = <A> Nil | Cons(A, List(A))

let a = (x) => c + 1
let c = 22

print("Hello, world!")

let fibonaci: Int -> Int = (n) =>
  match n then
  | n if n <= 2 => 1
  | n => fibonaci(n - 1) + fibonaci(n - 2)

let start = get_timestrap()
print(fibonaci(5))
print(get_timestrap() - start)